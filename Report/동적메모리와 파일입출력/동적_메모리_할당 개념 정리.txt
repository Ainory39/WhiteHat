1.정적 할당과 동적할당의 개념

 1.1 정적 할당
   1.1.1 정의
          프로그램을 실행하기 전에 필요한 자원을 미리 할당하는 기법으로 필요한 자원이 미리 준비되기 때문에 실행 속도는 빠르나 자원의 
         이용은 비효율적. 정적 할당이란 main함수를 시작할 때 메모리의 데이터 영역에 컴파일러가 크기에 맞게 자동으로 할당한다.
         이를 정적 할당이라한다.

   1.1.2 단점
          만약 배열에 100개의 요소를 저장할 수 있다고 했을 때, 실제로는 30개만 저장한다면 이는 극심한 메모리의 낭비가 될 것이고, 
         500개를 저장한다면 메모리가 부족할 것이다. 그렇다고 배열의 크기를 변수로 지정하는 것은 문법에 어긋나기 때문에 불가능하다. 
         이럴 때 사용할 수 있는 것이 동적 할당이다.

 1.2 동적 할당
   1.2.1 정의
          필요할 때 메모리를 할당하고 사용을 다했을 경우 해제하는 기법. 정적 할당보다 속도는 느리지만 메모리를 개발자가 상황에 따라 
         다르게 설정할 수 있으므로 메모리를 매우 효율적으로 사용할 수 있다.

   1.2.2 필요성
         (1) 메모리 낭비 감소
         (2) 런타임(프로그램 실행) 중일 때 메모리의 크기를 변경하는 것이 가능
         (3) 큐, 스택, 연결리스트, 이진트리와 같은 자료구조를 표현할 때 사용

   1.2.3 동적 할당에 사용되는 함수들
          1) malloc()
              보이드형 포인터 변수를 반환하는 함수로써 동적 할당할 때 쓰이는 가장 일반적인 함수이다. 함수의 원형은 아래와 같다.

                                                       void* malloc(size_t size);

              포인터 변수에 malloc 함수를 사용하여 메모리를 동적 할당할 수 있다. 인수에는 할당할 byte값을 넣으면 된다.
              malloc 함수를 사용할 경우 반드시 메모리를 할당해줘야 한다. malloc 함수는 void형 pointer 함수이므로 반드시 형 변환 연산자를
              사용해 올바르게 형 변환을 시켜야 제대로 사용할 수 있다.
          
          
          2) calloc()
              calloc 함수는 malloc 함수와 같은 기능을 가지고 있다. 하지만 사용하는 형태가 조금 다르다. 함수의 원형은 아래와 같다.

                                             void* calloc(size_t elt_count, size_t elt_size);

              calloc 함수는 elt_size만큼의 크기의 변수를 elt_count 개수 만큼 저장할 수 있는 메모리 공간을 할당하라는 의미이다.     
              malloc 함수는 사용할 총합 byte값을 인수로 갖는 반면, calloc 함수는 변수 1개의 크기와 사용할 변수의 개수를 인수로 가지기
              때문에 calloc 함수가 더 용이하게 사용될 때가 있다.

              calloc 함수를 사용할 때의 주의점이 있다.
              malloc 함수는 할당된 공간의 값이 바뀌지 않는 반면, calloc 함수는 할당된 공간의 값을 모두 0으로 초기화한다. 배열을 할당하고
              모두 0으로 바꿀 필요가 있는 경우 calloc을 사용하면 더 편하다.
            
                 
          3) realloc()
              realloc 함수는 이미 동적 할당된 메모리 공간의 크기를 조정이 필요할 때 사용한다. 에디터 프로그램을 예로 들어보자면, 
              2가지 메모리 할당을 할수 있을건데, 파일의 크기를 읽은다음 파일의 크기만큼 한번에 메모리 할당을 해버리는 방법과 
              1024 바이트 정도로 할당하고, 파일을 읽어들이다가 1024 를 초과하게 되면, realloc 를 이용해서 1024를 더 할당해주는 방법이 있다.

              어느걸 사용하든지 관계는 없지만, realloc 은 기본행동이 만약 연속된 메모리 공간이 충분하지 않을경우 연속된 메모리 공간을 
              할당할수 있도록 새로 공간을 잡게 되며, 이와중에 기존의 데이타가 복사되므로 상당히 많은 비용이 소모될 수 있다.
              (실제 테스트 해보면 malloc 에 비해서 눈에 띄게 많은 시간이 소모된다)
              
              
          4) free()
              malloc 함수는 메모리 할당을 커널에 요청하는 시스템 함수이다. 그러므로 일단 malloc()에 의해서 할당받은 메모리는
              프로세스가 종료될때까지 커널에 의해서 보호받게 된다. 
              그렇기 때문에 malloc 함수로 할당한 메모리 공간은 반드시 free 함수를 사용해 메모리 공간을 반환해야한다.
              만약 반환하지 않고 계속 메모리 할당을 할 경우, 메모리 공간의 낭비가 될 수 있으며 심각한 경우에는 메모리 누수 현상이
              발생할 수 있다. 
              
              메모리 누수는 프로그램과 시스템에 매우 치명적일수 있다. 특히 이러한 종류의 문제는 컴파일러에서 처리를 해주지 않기
              때문에 나중에 문제점을 찾기가 매우 곤란해진다.
              
              
